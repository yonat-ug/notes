


[git codeschool entry:]

	git init									to initialize a git repository 
	git status									current state of the project
	git add octocat.txt								add new/modified file to staging area
	git commit -m "Add cute octocat story"						store staged changes
	git add '*.txt'									add all .txt files to staging area
	git log										log
	git remote add origin https://github.com/try-git/try_git.git			add new/modified file to remote staging area
	git push -u origin master							"-u" saves defaults: [name of remote] = origin, [default branch] = master
	git push									acts regarding "git push -u origin master"							 
	git pull origin master								pulls down any new changes
	git diff HEAD									to look what is different from our last commit, HEAD indicates our last commit
	git add octofamily/octodog.txt							
	git diff --staged								staged changes [creation of the new file according the the command above]	
	git reset octofamily/octodog.txt						unstage file
	git checkout --octocat.txt							undo all changes after the last commit
	git branch clean_up								create a branch called clean_up
	git checkout clean_up								checkout/switch to clean_up branch
	git rm '*.txt'									remove from disk the actual files & stage the removal of the files
	git commit -m "Remove all the cats"						perform rm above, committing the changes
	git checkout master								checkout/switch to master branch
	git merge clean_up								merge clean_up to master
	git branch -d clean_up								delete a branch after merge
	git push									push everything to remote repository


[https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository]

	[Initialization of a Repository in an Existing Directory]
	git init
	git add *.c
	git add LICENCE
	git commit -m 'initial project version'
	
	[Clone an Existing Repository]
	git clone https://github.com/libgit2/libgit2					[creates a directory named "libgit2"],
											[initializes a .git directory inside],
											[pulls down all the data for that repository],
											[checks out a working copy of the latest version].

	git clone https://github.com/libgit2/libgit2 libgit				[same as above & target directory is libgit]

	git status -s									[short status] 
	git status --short								[short status]

	cat .gitignore									[define a list of files, that will be ignored]

	




	[fabric basics]
	
	Definition: Library and command line tool for streamlining the use of SSH for application deployment or systems administration tasks.
		
		i.e.
		-A tool that lets you execute arbitrary python functions via the command line,
		-A library of subroutines to make executing shell commands over SSH easy and Pythonic
	
	

			SSH (Secure Shell):
			Secure Shell, or SSH is a cryptographic (encrypted) network protocol to allow remote login and other network sercives over an unsecured network.
			SSH provides a secure channel over an unsecured network in a client-server architecture, connecting an SSH client application with an SSH server.
			Common applications include remote command-line login and remote command line execution, but any network service can be secured with SSH.
			The protocol specification distinguishes between two major versions SSH-1 and SSH-2.
			The most visible application of the protocol is for access to shell accounts on Unix-like systems, but it sees some limited use on Windows as well.
			In 2015, Microsoft announced that they would include native support for SSH in a future release.
			SSH was designed as a replacement for Telnet and for unsecured remote shell protocols such as the Berkey rlogin, rsh, and rexec protocols.
			Those protocols send information, notably passwords, in plaintextm rendering them susceptible to interception and disclosure using packet analysis.
			The encription used by SSH is intented to provide confidentially and integrity of data over an unsecured network, such as the Internet, although
			files leaked by Edward Snowden indicate that National Security Agency can sometimes decrypt SSH, allowing them to read the content of SSH sessions. 



	def hello():
		print("Hello Word!")

	placed in a module file named fabfile.py in current working directory,
	that hello function can be executed with the fab tool 

	$fab hello
	Hello world!

	Note: the fab tool simply imports your fabfile and executes the function or functions you instruct it to.
	There is nothing magic about it - anything you can do in a normal python script can be done in a fabfile.
	
		[Task arguments]
		def hello(name="world"):
			print("Hello %s!" % name)

		$fab hello:name = Jeff
			Hello Jeff!

		Done.

		[Local Commands]
		As used above, fab only really saves a couple of lines of if __name__== "__main__"
		boilerplate. Its mostly designed for use with Fabrics API, which contains functions for executing shell commands,transferring files etc
		Let's build a hypothetical web application fabfile. This example scenario is as follows: The Web application is managed via Git on a 
		[remote host vchost]. On localhost, we have a local clone of said Web application. When we push changes back to vchost, we want to be 
		able to immediately install these changes on a remote host my_server in an automated fashion. We will do this by automoting the local and
		remote Git command. Fabfiles are usually work best at the root of a project:

		__init__.py
		app.wsgi
		fabfile.py
		manage.py
		my_app
			__init__.py
			models.py
			templates
				index.html
			tests.py
			urls.py
			views.py

		Note: We're using a Django application here, but only as an exaple, Fabric is not tied to any external codebase, save for its
		SSH library.
	
		[local shell command.]


			from fabric.api import local
			
			def prepare_deploy():
				local("./manage.py test my_app")
				local("git add -p && git commit")
				local("git push")

	


			[Alternative implementation:]
			
			from fabric.api import local
			
			def test():
				local("./manage.py test my_app")

			def commit():
				local("git add -p && git commit")

			def push():
				local("git push")

			def prepare_deploy():
				test()
				commit()
				push()
		

		[Failure]
		Our base case work fine now, but what happens if our tests fail? Chances are we want
		to put on the brakes and fix them before deploying.
		Fabric checks the return value of programs called via operations and will abort if they
		didn't exit cleanly. Let's see what happens if one of our tests encounters an error.
			[-> We do not have to do anything Fabric detected the failure and aborted, never running the commit task]

		
		[Failure handling]
		But what if we wanted to be flexable and give the user a choice? A setting or env var called warn_only
		lets you turn aborts into warnings, allowing flexible error handling to occur.

		Lets flip this setting on for our test function, and then inspect the result of the local call ourselves:
		
			from __future__ import with_statement
			from fabric.api import local, settings, abort
			from fabric.contrib.console import confirm
	
			def test():
				with settings(warn_only=True):
					result = local('./manage.py test my_app',capture = True)
				if result.failed and not confirm("Tests failed. Continue anyway?"):
					abort("Aborting at user request.")

			
			In adding this new feature we've introduced a number of new things:
				- The __future__ import required to use with: in Python 2.5
				- Fabric's contrib.console submodule, containing the confirm function, used for simple yes/no promts;
				- The setting context managerm used to apply settings to a specific block of code; 
				- Command-runnning operations like local can return objects containing info about their result (such as .failed or .rerun code)
				- And the abort function, used to manually abort execution		
	

		[Making Connections]
		Lets start wrapping up our fabfile by putting in the keystone: a deploy taks that is destined to run on one or more
		remote servers, and ensures the code is up to date.
		
			def deploy():
				code_dir = '/srv/django/myproject'
				with cd(code_dir):
					run("git pull")
					run("touch app.wsgi")

			
			Run is similar to local but runs remotely instead of locally.

			from __future__ import with_statement
			from fabric.api import local, settings, abort, run, cd
			from fabric.contrib.console import confirm

		We never specified any connection info in our fabfile, so Fabric doesn't know on which host(s) the remote command should be
		executed. When this happens, Fabric prompts us at runtime. 
		[Connection definitions use SSH-like "host strings" (e.g. user@host:port) and will use your username as default - so in this example
		, we just had to specify the hostname, my_server]	


		[Remote Interactivity]
		git pull works fine if you have already got a checkout of your souece code - but what if this is the first deploy.
		It would be nice to handle that case too and do the initial git clone:

		
			def deploy():
				code_dir = '/srv/django/myproject'
				with settings(warn_only = True):
					if run("test -d %s" % code_dir).failed:
						run("git clone user@vcshost:/path/to/repo/.git %s" % code_dir)
				with cd(code_dir):
					run("git pull")
					run("touch app.wsgi")


	
		As with our calls to local above, run also lets us construct clean python-level logic based on executed shell commands.
		However, the interesting part here is the git clone call: since we 're using Gits SSH method of accessing the 
		repository on our Git server, this means our remote run call will need to authenticate itself.

		Older versions of Fabric run remote programs in [limbo], unable to be touched from the local end. This is problematic when you have
		a serious need to enter passwords or otherwise interact with the remote program.

		Fabric 1.0 and later breaks down this wall and ensures you can always talk to the other side.
		Let's see what happens when we run our updated deploy task on a new server with no Git checkout:

		[Defining Connections Beforehand]
		Specifying connection info at runtime gets old real fast, so Fabric provides a handful of ways to do it in your fabfile
		or on the command line.
			[We won't cover all of them here, but we will show you the most common one: setting global host list, env.hosts]
			[env is a global dictionary-like object driving many of Fabric's settings, and can be written to with attributes as
			well (in fact, settings, seen above, is simply a wrapper for this.)]
			[Thus, we can modify it at module level near the top of our fabfile like so:]

				from __future__ import with_statement
				from fabric.api import *
				from fabric.contrib.console import confirm

				env.hosts = ['my_server']
	
				def test():
					do_test_stuff()

			When fab loads up ourfabfile, our modification of env will execute, storing our settings change. The end result is 
			exactly as above: our deploy task will run against the my_server server.

			This is also how you can tell Fabric to run on multiple remote systems at once: because enc.hosts is a list, fab
			iterates over it, calling the given task once for each connection.

		
		[Conclusion]
		#the code:

		from __future__ import with_statement
		from fabric.api import *
		from fabric.contrib.console import confirm
		
		env.hosts = ['my_server']

		def test():
			with setting(warn_only = True):
				result = local('./manage.py test my_app',capture = True)
			if result.failed and not confirm("Tests failed. Continue anyway?"):
				abort("Aborting at user request.")

		def commit():
			local("git add -p && git commit")

		def push():
			local("git push")

		def prepare_deploy():
			test()
			commit()
			push()

		def deploy():
			code_dir = '/srv/django/myproject'
			with settings(warn_only = True):
				if run("test -d %s" % code_dir).failed:
					run("git clone user@vcshost:/path/to/repo/.git %s" % code_dir)
			with cd(code_dir):
				run("git pull")
				run("touch app.wsgi")	
				


		[The environment dictionary]
		Most of the fabrics behaviour is controllable by modifying env variables, such as env.hosts.
		Other commonly-modified env vars include
			-user: Fabric defaults to your local username when making SSH connection, but you can use env.user
			to override this is necessary. The execution mode documentation also has info on how to specify usernames on a per-host basis.
			-password: Used to explicitly set your default connection or sudo password if desired. Fabric will prompt you when necessary
			if this isnt set or doesnt appear to be valid
			-warn_only: a boolean setting determining wheter Fabric exits when detecting errors on the remote end.
			See Execution model for more on this behaviour.
		
		[The settings context manager]
		In many situations, it is useful to only temporarily modify env vars so that a given settings change only applies to a block of code.
		Fabric provides settings context manager, which takes any number of key/value pairs and will use them to modify env within its 
		wrapped block.
		There are many situations where setting warn_only (see below) is useful. To apply it to a few lines of code, use settings(warn_only=True),
		as seen in this simplified version of the contrib exists funciton.

				from fabric.api import settings,run
			
				def exists(path):
					with settings(warn_only=True):
						return run('test -e %s' % path)

		See the context managers API documentation for details on settings and otherm similar tools.
		
		env object is simply a dictionary subclass, so your own fabfile code may store information in it as well. This is sometimes
		useful for keeping state between multiple tasks within a single execution run.

		[Other Considerations]
		While it subclasses dict, Fabrics env has been modified so that its values may be read/written by way of attribute access, as seen
		in some og the above material. In other words, env.host_string and env['host_string'] are functionally identical.

		The fact that its a dictionarry can be useful in other ways, such as with pythons dict based string interpolation
		
				
				print("Executing on %s as %s" % (env.host,env.user))
				

		[Full list of env vars]
			Below is a list of all predefined environment variables.

			
		abort_exception		  	Overrides standard behaviour [abording by printing an error message to stderr and calling sys.exit(1)] env.abort_exception = MyException
		abort_on_prompts		Default = False	  when true, fabric will run in a non-interactive mode, calling abort anytime it would normally promt the user for input
		all_hosts			Default = []      full host list for currently executing command. For informational purposes only
		always_use_pty			Default = True	  if set to False, causes run/sudo to act as if they have been called with pty = False
		colorize_errors			colorize_errors   when set to True, error output to the terminal is colored red and warnings are colored magenta to make them easier to see
		combine_stderr                  Default = True    causes the ssh layer to merge a remote programs stdout and stderr streams to avoid becoming meshed together when printed
		command				Default = None	  set by fab to the currently executing command name for informational purposes only
		command_prefixes		Default = []	  Modified by prefix and, prepended to commands executed by run/sudo
		command_timeout			Default = None	  Remote command timeout, in seconds
		connection_attempts		Default = 1	  Number of times fabric will attempt to connect when connecting to a new server. 
		cwd				Default = ''	  Current working directory. Used to keep state for the cd context manager.
		dedupe_hosts			Default = True	  Deduplicate marged host lists so any given host string is only represented once
		disable_known_hosts		Default = False	  If true, ssh layer will skip loading the user's known-hosts file. Useful for avoiding exceptions in situations
		eagerly_disconnect		Default = False	  If true, causes fab to close connections after each individual task execution, instead of at the end of the run
		effective_roles			Default = []	  set by fab to the roles liset of the currently executing command. For informational purposes only.
		exclude_hosts			Default = []	  specifies a list of host strings to be skipped over during fab execution. Typically set via --exclude-host/-x
		fabfile				Default = fabfile.py   fab searches this when loading fabfiles
		gateway				Default = None	  enables ssh-driven gatewaying through the indicated host
		host_string			Default = None	  defines the current user/host/port which fabric will connect to when executing run, put and so forth
		forward_agent			Default = False   if true, enables forwarding of your local ssh agent to the remote end
		host				Default = None    set to the hostname part of env.host_string by fab. For informational purposes only.
		hosts				Default = []	  the global host list used when composing per-task host lists.
		keepalive			Default = 0	  an integer specifying an ssh keepalive interval to use, basically maps to the ssh config option ServerAliveInterval.
		key				Default = None    A string or file like object, containing an ssh key, used during connection authentification
		key_filename			Default = None	  may be string or list of strings, referencing file paths to ssh key files to try when connecting.
		linewise			Default = False	  forces buffering by line instead of by character/byte, typically when running in parallel mode
		local_user			read-only value containing the loval system username. This is the same value as users initial value.
		no_agent			Default = False	  if true, ssh layer wont seet out runnung ssh agents when using key-based authentication
		no_keys				Default = False   if true, will tell the ssh layer not to load any private key files from ones home $HOME/.ssh folder
		parallel			Default = False   when true, forces all tasks to run in parallel. Implies env.linewise.
		password			Default = None	  The default password used by ssh layer when connecting to remote hosts and/or when answering sudo promts
		passwords			Default = {}	  The dictionary largely used by the ssh layer when connecting to remote hosts when answering sudo promts	
		path				Default = ''	  used to set $PATH shell environment variable when executing commands in run/sudo/local. It is recommended to use the path								     context manager for managing this value instead of setting it directly.
		pool_size			Default = 0	  		Sets the number of concurrent processes to use when executing tasks in parrallel [Parallel execution]
		prompts				Default = {}	  		The prompts dictionary allows users to control interactive prompts. 
										If a key in the dictionary is found in a commands
								  		standard output stream, fabric will automatically answer with the corresponding dictionary value.
		port				Default = None	  		set to port part of env.host_string by fab when iterating over a host list. 
										May also be used to specify a default port.
		
		real_fabfile			Default = None	  		Set by fab with the path to the fabfile it loaded up, if it got that far. For informational purposes only.
								  		[fab options and arguments]	
		remote_interrupt		Default = None	  		Controls whether Ctrl+C triggers an interrupt remotely or is captured locally, as follows
								  		- None (the default): only open_shell will exhibit remote interrupt behaviour, 
										and run/sudo will capture interrupts 
								  		- False: even open_shell captures locally
								  		- True: all functions will send the interrupt to the remote end.
		rcfile				Default = $HOME/.fabricrc 	path when loading Fabrics local setting file
		reject_unknown_hosts	        Default = False	  		If True, ssh layer will raise an exception when connecting to hosts not listed in the users known host file
		system_known_hosts		Default = None	  		If set, should be the path to a known_hosts file. 
										the ssh layer will read this file before reading the users known host 
		roledefs			Default = {}	  		Dictionary defining role name to host list mappings 
		roles				Default = []	  		the global role list when composing per task host lists.
		shell				Default = /bin/bash -l -c  	Value used as shell wrapper when executing commands with e.g. run. 
										Must be able to exist in the form <env.shell> "<command goes here>"
										[FAQ on bash as default shell, exception model]	
		skip_bad_hosts			Default = False		If True, causes fab to skip over hosts it cant connect to
		skip_unknown_tasks		Default = False		If True, causes fab to skip over tasks not found, without aborting
		ssh_config_path			Default = $HOME/.ssh/config 	Allows specification of an alternative ssh configuration file path
		ok_ret_codes		   	Default = [0] 			Return codes in this list are used to determine wheter calls to run/sudo/sudo are considered successful
		sudo_prefix			Default = "sudo -S -p '%(sudo_prompt)s' " % env
		sudo_prompt			Default = "sudo password:"
		sudo_user			Default =  None 		Used as a fallback value for sudo s user argument if none is given. Useful in combination with settings.
		tasks				Default = []			set by fab, full tasks list to be executed for the currently executing command.
		timeout				Default = 10			Network connection timeout, in seconds
		use_shell			Default = True			Global setting which acts like the shell argument to run/sudo: if it is set to False operations 
		use_ssh_config			Default = False			Set to True to cause Fabric to load your local ssh config file.
		user				Default = users local username
		version				Default = current fabric version string
		warn_only			Default = False 		Specifies whether or not to warn, instead of abort, when run/sudo/local encounter error conditions






[Fabfile discovery]
	The fabfile discovery algorithm searches in the invoking user’s current working directory or any parent directories. 

[Operations]
	
fabric.operations.get(*args, **kwargs)					Download one or more files from a remote host.
fabric.operations.local(command, capture=False, shell=None)		Run a command on the local system.
fabric.operations.open_shell(*args, **kwargs)				Invoke a fully interactive shell on the remote end.
fabric.operations.prompt(text, key=None, default='', validate=None)	Prompt user with text and return the input 
fabric.operations.put(*args, **kwargs)					Upload one or more files to a remote host.
fabric.operations.reboot(*args, **kwargs)				Reboot the remote system.
fabric.operations.require(*keys, **kwargs)				Check for given keys in the shared environment dict 
fabric.operations.run(*args, **kwargs)					Run a shell command on a remote host.
fabric.operations.sudo(*args, **kwargs)					Run a shell command on a remote host, superuser 



		# Simplest form:
		environment = prompt('Please specify target environment: ')

		# With default, and storing as env.dish:
		prompt('Specify favorite dish: ', 'dish', default='spam & eggs')

		# With validation, i.e. requiring integer input:
		prompt('Please specify process nice level: ', key='nice', validate=int)

		# With validation against a regular expression:
		release = prompt('Please supply a release name', validate=r'^\w+-\d+(\.\d+)?$')

		# Prompt regardless of the global abort-on-prompts setting:
		with settings(abort_on_prompts=False):
    			prompt('I seriously need an answer on this! ')



		with cd('/tmp'):
    			put('/path/to/local/test.txt', 'files')



		put('bin/project.zip', '/tmp/project.zip')
		put('*.py', 'cgi-bin/')
		put('index.html', 'index.html', mode=0755)



		run("ls /var/www/")
		run("ls /home/myuser", shell=False)
		output = run('ls /var/www/site1')
		run("take_a_long_time", timeout=5)



		sudo("~/install_script.py")
		sudo("mkdir /var/www/new_docroot", user="www-data")
		sudo("ls /home/jdoe", user=1001)
		result = sudo("ls /tmp/")
		with settings(sudo_user='mysql'):
    			sudo("whoami")




[Context Managers]
	
fabric.context_managers.cd(path)			Context manager that keeps directory state when calling remote operations.
fabric.context_managers.char_buffered(*args, **kwds)   	Force local terminal pipe be character, not line, buffered.
fabric.context_managers.hide(*args, **kwds)  		Context manager for setting the given output groups to False.
fabric.context_managers.lcd(path)  			Context manager for updating local current working directory.
fabric.context_managers.path(path, behavior='append')  	Append the given path to the PATH used to execute any wrapped commands.
fabric.context_managers.prefix(command)  		Prefix all wrapped run/sudo commands with given command plus &&.
fabric.context_managers.quiet()  			Alias to settings(hide('everything'), warn_only=True)
fabric.context_managers.remote_tunnel(*args, **kwds)  	Create a tunnel forwarding a locally-visible port to the remote target.
fabric.context_managers.settings(*args, **kwargs)  	Nest context managers and/or override env variables.
fabric.context_managers.shell_env(**kw)  		Set shell environment variables for wrapped commands.
fabric.context_managers.show(*args, **kwds)  		Context manager for setting the given output groups to True
fabric.context_managers.warn_only()  			Alias to settings(warn_only=True)

	with cd('/path/to/app'):
    		with prefix('workon myvenv'):
        		run('./manage.py syncdb')
        		run('./manage.py loaddata myfixture')



	with cd('/path/to/app'), prefix('workon myvenv'):
    		run('./manage.py syncdb')
    		run('./manage.py loaddata myfixture')


	run('cd /var/www')
		run('ls')


	with cd('/var/www'):
    		run('ls') # cd /var/www && ls
    		with cd('website1'):
        		run('ls') # cd /var/www/website1 && ls


	def my_task():
    		with hide('running', 'stdout', 'stderr'):
        	run('ls /var/www')


	with prefix('workon myvenv'):
    		run('./manage.py syncdb')


	with cd('/path/to/app'):
    		with prefix('workon myvenv'):
        		run('./manage.py syncdb')
        		run('./manage.py loaddata myfixture')



	with prefix('workon myenv'):
    		run('ls')
    	with prefix('source /some/script'):
        	run('touch a_file')



	with quiet():
    		have_build_dir = run("test -e /tmp/build").succeeded


	# Map localhost:6379 on the server to localhost:6379 on the client,
	# so that the remote 'redis-cli' program ends up speaking to the local
	# redis-server.
	with remote_tunnel(6379):
    		run("redis-cli -i")



	def my_task():
    	with settings(
        	hide('warnings', 'running', 'stdout', 'stderr'),
        	warn_only=True
    	):
        
		if run('ls /etc/lsb-release'):
            		return 'Ubuntu'
        	elif run('ls /etc/redhat-release'):
            		return 'RedHat'


	# Before the block, env.parallel defaults to False, host_string to None
	with settings(parallel=True, host_string='myhost'):
    		# env.parallel is True
    		# env.host_string is 'myhost'
    		env.host_string = 'otherhost'
    		# env.host_string is now 'otherhost'
	# Outside the block:
	# * env.parallel is False again
	# * env.host_string is None again



	# Before the block, env.parallel defaults to False, host_string to None
	with settings(parallel=True, host_string='myhost', clean_revert=True):
    		# env.parallel is True
    		# env.host_string is 'myhost'
    		env.host_string = 'otherhost'
    		# env.host_string is now 'otherhost'
	# Outside the block:
	# * env.parallel is False again
	# * env.host_string remains 'otherhost'

	def my_task():
    		with show('debug'):
        	run('ls /var/www')



[Decorators]

fabric.decorators.hosts(*host_list)  				Decorator defining which host or hosts to execute the wrapped function on.
fabric.decorators.parallel(pool_size=None)			Forces the wrapped function to run in parallel, instead of sequentially.
fabric.decorators.roles(*role_list)  				Decorator defining a list of role names, used to look up host lists.
fabric.decorators.runs_once(func)   				Decorator preventing wrapped function from running more than once.
fabric.decorators.serial(func)  				Forces the wrapped function to always run sequentially, never in parallel.
fabric.decorators.task(*args, **kwargs)  			Decorator declaring the wrapped function to be a new-style task.
fabric.decorators.with_settings(*arg_settings, **kw_settings)  	Decorator equivalent of fabric.context_managers.settings


@hosts('user1@host1', 'host2', 'user2@host3')
def my_func():
    pass




env.roledefs.update({
    'webserver': ['www1', 'www2'],
    'dbserver': ['db1']
})

@roles('webserver', 'dbserver')
def my_func():
    pass


@with_settings(warn_only=True)
def foo():
    ...







	
		






























		

















	 
